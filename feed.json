{
	"version": "https://jsonfeed.org/version/1",
	"title": "Jay Lyerly",
	"icon": "https://micro.blog/jaylyerly/avatar.jpg",
	"home_page_url": "https://www.bugsandbunnies.org/",
	"feed_url": "https://www.bugsandbunnies.org/feed.json",
	"items": [
		
			{
				"id": "http://jaylyerly.micro.blog/2023/04/14/hey-no-cameras.html",
				
				"content_html": "<p>Hey!  No cameras! #BunnyButtFriday #RabbitsOfMastodon</p>\n\n<p><img src=\"uploads/2023/361c425a6b.jpg\" width=\"450\" height=\"600\" alt=\"\"></p>\n",
				"content_text": "Hey!  No cameras! #BunnyButtFriday #RabbitsOfMastodon \n\n<img src=\"uploads/2023/361c425a6b.jpg\" width=\"450\" height=\"600\" alt=\"\">\n",
				"date_published": "2023-04-14T09:41:31-05:00",
				"url": "https://www.bugsandbunnies.org/2023/04/14/hey-no-cameras.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2023/04/12/unit-testing-with.html",
				"title": "Unit testing with UIDocumentPickerViewController -- An Un-Googlable Bug",
				"content_html": "<p>TLDR &ndash; If your unit tests crash with <code>DocumentManager service tried to send a message to a deallocated host proxy</code>, make sure you&rsquo;re dismissing any presented instance of UIDocumentPickerViewController.</p>\n\n<p>In our <a href=\"https://callistoapp.com\">Callisto</a> Xcode project, we&rsquo;ve got a lot of unit tests.  Like over a thousand.  We&rsquo;re at the point where if tests have a 0.1% chance of failing, then it happens <em>every time</em>.  Our tests need to be really rock solid, or there&rsquo;s no way we&rsquo;ll get a clean run which is the only way CI will let a build through.</p>\n\n<p>Some time ago, we started noticing the occasional test failure with an uncaught exception:</p>\n\n<blockquote>\nDocumentManager service tried to send a message to a deallocated host proxy\n</blockquote>\n\n<p>It would crop up when running test both locally and in CI.  With so many tests, we get the weird edge case now and then, but they&rsquo;re not worth the time to track down.  We ignored it.  With the recent update to Xcode 14.3 and macOS 13.3, the DocManager exception went from occasional annoyance to &lsquo;omg, this happens every time I unit test on iOS&rsquo;.  So now we have to fix it.</p>\n\n<p>But what&rsquo;s a DocManager?  IDK &ndash; there&rsquo;s nothing with that name in our code and nothing in the docs about an Apple framework called DocManager.  Looking through the traceback, it&rsquo;s pretty obvious that it&rsquo;s some kind of internal Apple thing.  Surprisingly, a Google search for this error returns <em>absolutely no results</em>.  That&rsquo;s never a good sign.</p>\n\n<p>But what&rsquo;s a DocManager do?  Callisto is UIDocument based, so maybe DocManager manages documents?  A bunch of the unit tests open instances of a UIDocument and aren&rsquo;t 100% about cleaning those up, so maybe some housekeeping will help.  Cue the plumbing montage.  We added a some bookkeeping to make sure that any open UIDocuments were closed at the end of each test, so now we&rsquo;re sure there are no dangling UIDocuments.  No impact &ndash; still the DocManager throws the exception.</p>\n\n<p>This particular problem is a huge pain to track down.  Somewhere in the tests, things get into a bad state.  Later, while another test is running, some background thread discovers the bad state and throws an exception.  The cause of the crash and the actual crashing are quite loosely coupled, making it hard to pin down the culprit.  It also means that the offending tests will run just fine by itself, but only cause a crash when a large number of tests run, giving the background issue time to percolate to the surface.</p>\n\n<p>After a couple hours of testing the tests and narrowing down which ones fail, it started to look like UIDocumentPickerViewController might be involved.  We&rsquo;ve got some ViewControllers that open a docPicker and get feedback via the docPicker&rsquo;s delegate methods.  To test those, we programmatically tap a button to cause the dockPicker to be presented, get a handle to that docPicker and call the delegate with the docPicker and some fake results.  This works great for testing!  Except for that pesky exception that gets thrown now and then.</p>\n\n<p>If we take a closer look at the exception, we&rsquo;ll see there&rsquo;s a little more info attached in the userInfo dict, specifically a file and line number, DOCRemoteViewControlller.m line 42.  Not that we have access to the source, but the name of the file, &ldquo;Remote View Controller&rdquo;, does offer a hint of its purpose.  Those docPicker view controllers offer our app an escape hatch out of the sandbox and into the rest of the file system on the device.  In my limited understanding, the docPickers interface with a separate process that manages file system access, so they actually represent some state from another (<strong>remote</strong>) long lived process.  In the end, these dangling, un-dismissed docPickers were the root of the problem.  Make sure all your UIDocumentPickerViewControllers are dismissed properly and the problem goes away.</p>\n\n<p>Whew!</p>\n",
				"content_text": "TLDR -- If your unit tests crash with `DocumentManager service tried to send a message to a deallocated host proxy`, make sure you're dismissing any presented instance of UIDocumentPickerViewController.\n\nIn our [Callisto](https://callistoapp.com) Xcode project, we've got a lot of unit tests.  Like over a thousand.  We're at the point where if tests have a 0.1% chance of failing, then it happens _every time_.  Our tests need to be really rock solid, or there's no way we'll get a clean run which is the only way CI will let a build through.\n\nSome time ago, we started noticing the occasional test failure with an uncaught exception:\n\n<blockquote>\nDocumentManager service tried to send a message to a deallocated host proxy\n</blockquote>\n\nIt would crop up when running test both locally and in CI.  With so many tests, we get the weird edge case now and then, but they're not worth the time to track down.  We ignored it.  With the recent update to Xcode 14.3 and macOS 13.3, the DocManager exception went from occasional annoyance to 'omg, this happens every time I unit test on iOS'.  So now we have to fix it.\n\nBut what's a DocManager?  IDK -- there's nothing with that name in our code and nothing in the docs about an Apple framework called DocManager.  Looking through the traceback, it's pretty obvious that it's some kind of internal Apple thing.  Surprisingly, a Google search for this error returns _absolutely no results_.  That's never a good sign.\n\nBut what's a DocManager do?  Callisto is UIDocument based, so maybe DocManager manages documents?  A bunch of the unit tests open instances of a UIDocument and aren't 100% about cleaning those up, so maybe some housekeeping will help.  Cue the plumbing montage.  We added a some bookkeeping to make sure that any open UIDocuments were closed at the end of each test, so now we're sure there are no dangling UIDocuments.  No impact -- still the DocManager throws the exception.\n\nThis particular problem is a huge pain to track down.  Somewhere in the tests, things get into a bad state.  Later, while another test is running, some background thread discovers the bad state and throws an exception.  The cause of the crash and the actual crashing are quite loosely coupled, making it hard to pin down the culprit.  It also means that the offending tests will run just fine by itself, but only cause a crash when a large number of tests run, giving the background issue time to percolate to the surface.\n\nAfter a couple hours of testing the tests and narrowing down which ones fail, it started to look like UIDocumentPickerViewController might be involved.  We've got some ViewControllers that open a docPicker and get feedback via the docPicker's delegate methods.  To test those, we programmatically tap a button to cause the dockPicker to be presented, get a handle to that docPicker and call the delegate with the docPicker and some fake results.  This works great for testing!  Except for that pesky exception that gets thrown now and then.\n\nIf we take a closer look at the exception, we'll see there's a little more info attached in the userInfo dict, specifically a file and line number, DOCRemoteViewControlller.m line 42.  Not that we have access to the source, but the name of the file, \"Remote View Controller\", does offer a hint of its purpose.  Those docPicker view controllers offer our app an escape hatch out of the sandbox and into the rest of the file system on the device.  In my limited understanding, the docPickers interface with a separate process that manages file system access, so they actually represent some state from another (**remote**) long lived process.  In the end, these dangling, un-dismissed docPickers were the root of the problem.  Make sure all your UIDocumentPickerViewControllers are dismissed properly and the problem goes away.\n\nWhew!\n",
				"date_published": "2023-04-12T10:04:29-05:00",
				"url": "https://www.bugsandbunnies.org/2023/04/12/unit-testing-with.html",
				"tags": ["Swift"]
			},
			{
				"id": "http://jaylyerly.micro.blog/2023/04/11/excuse-me-waiter.html",
				
				"content_html": "<p>Excuse me waiter, there&rsquo;s a bit of hay in my water.  #RabbitsOfMastodon</p>\n\n<p><img src=\"uploads/2023/e416cb60d2.jpg\" width=\"483\" height=\"600\" alt=\"A big ruby eyed white rabbit looks at the camera, expressing her impatience because there is a large hay cake in her water bowl.  \"></p>\n",
				"content_text": "Excuse me waiter, there's a bit of hay in my water.  #RabbitsOfMastodon \n\n<img src=\"uploads/2023/e416cb60d2.jpg\" width=\"483\" height=\"600\" alt=\"A big ruby eyed white rabbit looks at the camera, expressing her impatience because there is a large hay cake in her water bowl.  \">\n",
				"date_published": "2023-04-11T13:33:56-05:00",
				"url": "https://www.bugsandbunnies.org/2023/04/11/excuse-me-waiter.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2023/01/07/philosophical-dragon.html",
				
				"content_html": "<p>Philosophical Dragon</p>\n\n<p><img src=\"https://cdn.uploads.micro.blog/47978/2023/55d522ccb0.jpg\" width=\"450\" height=\"600\" alt=\"\"></p>\n",
				"content_text": "Philosophical Dragon \n\n<img src=\"https://cdn.uploads.micro.blog/47978/2023/55d522ccb0.jpg\" width=\"450\" height=\"600\" alt=\"\">\n",
				"date_published": "2023-01-07T14:10:31-05:00",
				"url": "https://www.bugsandbunnies.org/2023/01/07/philosophical-dragon.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2023/01/04/marsedit.html",
				"title": "MarsEdit 5",
				"content_html": "<p>Tried to pay for an upgrade to MarsEdit 5 this morning, but it wouldn&rsquo;t let me.  The web store said I had purchased MarsEdit 4 too recently, and it gave me a free upgraded to version 5.  Nice!</p>\n",
				"content_text": "Tried to pay for an upgrade to MarsEdit 5 this morning, but it wouldn't let me.  The web store said I had purchased MarsEdit 4 too recently, and it gave me a free upgraded to version 5.  Nice! \n",
				"date_published": "2023-01-04T10:12:52-05:00",
				"url": "https://www.bugsandbunnies.org/2023/01/04/marsedit.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/11/27/greg-garcias-sprung.html",
				
				"content_html": "<p>Greg Garcia’s Sprung on Amazon Prime Video is quite good. He’s the creator behind My Name is Earl and Raising Hope. If you liked those, Sprung will be right up your alley. Some familiar faces too. So good.</p>\n",
				"content_text": "Greg Garcia’s Sprung on Amazon Prime Video is quite good. He’s the creator behind My Name is Earl and Raising Hope. If you liked those, Sprung will be right up your alley. Some familiar faces too. So good. \n",
				"date_published": "2022-11-27T14:32:18-05:00",
				"url": "https://www.bugsandbunnies.org/2022/11/27/greg-garcias-sprung.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/09/11/the-thinking-brick.html",
				
				"content_html": "<p>The Thinking Brick</p>\n\n<p><img src=\"https://cdn.uploads.micro.blog/47978/2022/6c1f906e1c.jpg\" width=\"600\" height=\"450\" alt=\"\" /></p>\n",
				"content_text": "The Thinking Brick\n\n<img src=\"https://cdn.uploads.micro.blog/47978/2022/6c1f906e1c.jpg\" width=\"600\" height=\"450\" alt=\"\" />\n",
				"date_published": "2022-09-11T19:00:12-05:00",
				"url": "https://www.bugsandbunnies.org/2022/09/11/the-thinking-brick.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/09/09/a-new-watch.html",
				"title": "A New Watch!",
				"content_html": "<p>I took the plunge and ordered a new <a href=\"https://www.apple.com/apple-watch-ultra/\">Ultra</a> Apple Watch sight unseen.  I&rsquo;m very excited for a new wrist computer, especially with a big orange button!  Seems weird though that there&rsquo;s no <em>titanium</em> watch band to dress it up.  I guess Apple is going full tilt on the outdoor adventure lifestyle to start.  The fancy matching titanium band will probably show up in the spring.</p>\n\n<p>(I desperately want to make an <a href=\"https://en.wikipedia.org/wiki/Ultraman\">Ultraman</a> joke, but <em>obviously</em> I&rsquo;m no Ultraman.)</p>\n",
				"content_text": "I took the plunge and ordered a new [Ultra](https://www.apple.com/apple-watch-ultra/) Apple Watch sight unseen.  I'm very excited for a new wrist computer, especially with a big orange button!  Seems weird though that there's no _titanium_ watch band to dress it up.  I guess Apple is going full tilt on the outdoor adventure lifestyle to start.  The fancy matching titanium band will probably show up in the spring.\n\n(I desperately want to make an [Ultraman](https://en.wikipedia.org/wiki/Ultraman) joke, but _obviously_ I'm no Ultraman.)\n",
				"date_published": "2022-09-09T08:05:01-05:00",
				"url": "https://www.bugsandbunnies.org/2022/09/09/a-new-watch.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/08/19/holy-shift-koenigseggs.html",
				"title": "Holy Shift! Koenigsegg’s New Transmission Is a 6-Speed Manual *and* a 9-Speed Automatic",
				"content_html": "<p>I always wondered if someone would build a clutch-by-wire system like this where there&rsquo;s a gear shift and a clutch, but not physically linked to the drivetrain.  This Koenigsegg gearbox sounds like just the thing.  The problem now is that we&rsquo;re all switching to gear-less electric motors, so will this come to electrics too?  Make &lsquo;em feel like a Miata?  I guess Dodge is going to try with the <a href=\"https://electrek.co/2022/08/17/dodge-shows-banshee-electric-charger-concept-an-ev-with-exhaust/\">eRupt</a>.</p>\n\n<p><a href=\"https://www.motortrend.com/reviews/koenigsegg-light-speed-transmission-manual-automatic-how-it-works-explained\">Holy Shift! Koenigsegg’s New Transmission Is a 6-Speed Manual *and* a 9-Speed Automatic</a>:</p>\n\n<blockquote>\"We still are in the process of developing it, but it's already crazy good. When we are done with it, I don't think anyone will be able to tell it apart from a traditional manual. That's the objective. It should feel like a mix between a Mazda Miata and a Ferrari gated shifter. The best of the two worlds.\"</blockquote>\n",
				"content_text": "I always wondered if someone would build a clutch-by-wire system like this where there's a gear shift and a clutch, but not physically linked to the drivetrain.  This Koenigsegg gearbox sounds like just the thing.  The problem now is that we're all switching to gear-less electric motors, so will this come to electrics too?  Make 'em feel like a Miata?  I guess Dodge is going to try with the [eRupt](https://electrek.co/2022/08/17/dodge-shows-banshee-electric-charger-concept-an-ev-with-exhaust/).\n\n<p><a href=\"https://www.motortrend.com/reviews/koenigsegg-light-speed-transmission-manual-automatic-how-it-works-explained\">Holy Shift! Koenigsegg’s New Transmission Is a 6-Speed Manual *and* a 9-Speed Automatic</a>:</p>\n\n<blockquote>\"We still are in the process of developing it, but it's already crazy good. When we are done with it, I don't think anyone will be able to tell it apart from a traditional manual. That's the objective. It should feel like a mix between a Mazda Miata and a Ferrari gated shifter. The best of the two worlds.\"</blockquote>\n",
				"date_published": "2022-08-19T13:30:07-05:00",
				"url": "https://www.bugsandbunnies.org/2022/08/19/holy-shift-koenigseggs.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/08/19/on-the-occasion.html",
				"title": "Serendipity ",
				"content_html": "<p>On the occasion of a blind squirrel finding a nut.</p>\n\n<p>Wordle 426 2/6\n<br>\n⬜🟩⬜🟨⬜\n<br>\n🟩🟩🟩🟩🟩</p>\n",
				"content_text": "On the occasion of a blind squirrel finding a nut. \n\nWordle 426 2/6\n<br>\n⬜🟩⬜🟨⬜\n<br>\n🟩🟩🟩🟩🟩\n",
				"date_published": "2022-08-19T08:29:46-05:00",
				"url": "https://www.bugsandbunnies.org/2022/08/19/on-the-occasion.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/08/12/sponge-worthy.html",
				"title": "Sponge worthy?",
				"content_html": "<p>My favorite new unix too is definitely <code>sponge</code>.  It&rsquo;s from the <a href=\"https://joeyh.name/code/moreutils/\">moreutils</a> suite, but the easiest way to get it on your Mac is a quick <code>brew install sponge</code>.</p>\n\n<p>You know how <code>sed</code> can edit a file in place?  Dope, right?  <code>sponge</code> makes it easy to do that with <em>all</em> the regular unix tools.  If I want to fix a DOS text file by removing the carriage return, I always try doing</p>\n\n<pre><code>cat my_file.txt | tr -d &quot;\\r&quot; &gt; my_file.txt\n</code></pre>\n\n<p>But that doesn&rsquo;t work because it starts writing to the file before it&rsquo;s all read and a lot of times, the file ends up empty.  <code>sponge</code> to the rescue!</p>\n\n<pre><code>cat my_file.txt | tr -d &quot;\\r&quot; | sponge my_file.txt\n</code></pre>\n\n<p><code>sponge</code> will read everything from standard in and then write it out to the given file, so this works like you want it to, even for big files.</p>\n\n<p>Also great with <a href=\"https://stedolan.github.io/jq/\"><code>jq</code></a> for prettifying JSON files in place too.</p>\n",
				"content_text": "My favorite new unix too is definitely `sponge`.  It's from the [moreutils](https://joeyh.name/code/moreutils/) suite, but the easiest way to get it on your Mac is a quick `brew install sponge`.\n\nYou know how `sed` can edit a file in place?  Dope, right?  `sponge` makes it easy to do that with _all_ the regular unix tools.  If I want to fix a DOS text file by removing the carriage return, I always try doing\n\n```\ncat my_file.txt | tr -d \"\\r\" > my_file.txt\n```\n\nBut that doesn't work because it starts writing to the file before it's all read and a lot of times, the file ends up empty.  `sponge` to the rescue!\n\n\n```\ncat my_file.txt | tr -d \"\\r\" | sponge my_file.txt\n```\n\n`sponge` will read everything from standard in and then write it out to the given file, so this works like you want it to, even for big files.\n\nAlso great with [`jq`](https://stedolan.github.io/jq/) for prettifying JSON files in place too.\n",
				"date_published": "2022-08-12T10:27:03-05:00",
				"url": "https://www.bugsandbunnies.org/2022/08/12/sponge-worthy.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/08/10/three-habits.html",
				"title": "Three Habits",
				"content_html": "<p><em>The three hardest habits to break are heroin, carbs and a steady paycheck.\n</em></p>\n\n<p><em>&ndash; Nassim Nicholas Taleb (paraphrased)</em></p>\n",
				"content_text": "<em>The three hardest habits to break are heroin, carbs and a steady paycheck. \n</em>\n\n<em>-- Nassim Nicholas Taleb (paraphrased)</em>\n",
				"date_published": "2022-08-10T14:03:08-05:00",
				"url": "https://www.bugsandbunnies.org/2022/08/10/three-habits.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/08/08/illinois-tech-spinout.html",
				"title": "Illinois Tech ‘spinout’ startup Influit Energ | EurekAlert!",
				"content_html": "<p>A research group out of Chicago has developed &ldquo;liquid batteries&rdquo;.  I have no idea how the chemistry of this works, but it sounds like you could refuel an electric car a lot like you&rsquo;d gas up an ICE car, and in a similar amount of time.  And about a billion other applications.</p>\n\n<p><a href=\"https://www.eurekalert.org/news-releases/961148\">Illinois Tech ‘spinout’ startup Influit Energ | EurekAlert!</a>:</p>\n\n<blockquote>The unique high-energy density liquid format of the NEF flow batteries allows use of the same fluids in different devices, meaning fluid, charged at the recharging station from renewable energy sources or a grid, can be used to rapidly refuel vehicles, or for stationary storage and other large portable applications,” Timofeeva says. “Discharged fluid can be returned to a recharge/refuel station for recharging or be charged inside the device by plugging into the power source.</blockquote>\n",
				"content_text": "A research group out of Chicago has developed \"liquid batteries\".  I have no idea how the chemistry of this works, but it sounds like you could refuel an electric car a lot like you'd gas up an ICE car, and in a similar amount of time.  And about a billion other applications.\n\n<p><a href=\"https://www.eurekalert.org/news-releases/961148\">Illinois Tech ‘spinout’ startup Influit Energ | EurekAlert!</a>:</p>\n\n<blockquote>The unique high-energy density liquid format of the NEF flow batteries allows use of the same fluids in different devices, meaning fluid, charged at the recharging station from renewable energy sources or a grid, can be used to rapidly refuel vehicles, or for stationary storage and other large portable applications,” Timofeeva says. “Discharged fluid can be returned to a recharge/refuel station for recharging or be charged inside the device by plugging into the power source.</blockquote>\n",
				"date_published": "2022-08-08T08:34:15-05:00",
				"url": "https://www.bugsandbunnies.org/2022/08/08/illinois-tech-spinout.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/08/04/muppet-songs-ernie.html",
				"title": "Muppet Songs: Ernie - Rubber Duckie - YouTube",
				"content_html": "<p>Today&rsquo;s earworm&hellip;</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=hBvtD6xs77g\">Muppet Songs: Ernie - Rubber Duckie - YouTube</a>:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hBvtD6xs77g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
				"content_text": "Today's earworm...\n\n<p><a href=\"https://www.youtube.com/watch?v=hBvtD6xs77g\">Muppet Songs: Ernie - Rubber Duckie - YouTube</a>:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hBvtD6xs77g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
				"date_published": "2022-08-04T10:27:46-05:00",
				"url": "https://www.bugsandbunnies.org/2022/08/04/muppet-songs-ernie.html",
				"tags": ["Earworm"]
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/08/03/daring-fireball-whats.html",
				"title": "Daring Fireball: 'What's the Deal With Water Bottles?'",
				"content_html": "<p>From the New Yorker via DF, a delightful survey of comics and their water bottles.  As a kid with cable, I watched a lot of standup, so I found this extremely interesting.  And the presentation is <em>molto bene</em> &ndash; the animated magazine version of the web.</p>\n\n<p><a href=\"https://daringfireball.net/linked/2022/08/01/water-bottles-standup\">Daring Fireball: 'What's the Deal With Water Bottles?'</a>:</p>\n",
				"content_text": "From the New Yorker via DF, a delightful survey of comics and their water bottles.  As a kid with cable, I watched a lot of standup, so I found this extremely interesting.  And the presentation is _molto bene_ -- the animated magazine version of the web.\n\n<p><a href=\"https://daringfireball.net/linked/2022/08/01/water-bottles-standup\">Daring Fireball: 'What's the Deal With Water Bottles?'</a>:</p>\n",
				"date_published": "2022-08-03T08:48:52-05:00",
				"url": "https://www.bugsandbunnies.org/2022/08/03/daring-fireball-whats.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2022/08/01/tricorders.html",
				"title": "Tricorders",
				"content_html": "<p>When I was a kid, I expected my tricorder would look like this</p>\n\n<p><img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://cdn.uploads.micro.blog/47978/2022/36af399d1b.jpg\" alt=\"Yokogawa AQ1200\" title=\"yokogawa-AQ1200.jpg\" border=\"0\" width=\"599\" height=\"486\" /></p>\n\n<p>But it turned out like this</p>\n\n<p><img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://cdn.uploads.micro.blog/47978/2022/8ceebb569f.jpg\" alt=\"158438 phones review iphone 13 pro review a lesson in refinement image5 ws2nobt8ak\" title=\"158438-phones-review-iphone-13-pro-review-a-lesson-in-refinement-image5-ws2nobt8ak.jpg\" border=\"0\" width=\"600\" height=\"400\" /></p>\n\n<p>Which still seems weird.</p>\n\n<p>Via <a href=\"https://wilwheaton.tumblr.com/post/691173806602141696/vizreef-yokogawa-aq1200-multi-field\">WIL WHEATON dot TUMBLR dot COM - vizreef: Yokogawa // AQ1200 Multi Field...</a>:</p>\n",
				"content_text": "When I was a kid, I expected my tricorder would look like this\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://cdn.uploads.micro.blog/47978/2022/36af399d1b.jpg\" alt=\"Yokogawa AQ1200\" title=\"yokogawa-AQ1200.jpg\" border=\"0\" width=\"599\" height=\"486\" />\n\nBut it turned out like this\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://cdn.uploads.micro.blog/47978/2022/8ceebb569f.jpg\" alt=\"158438 phones review iphone 13 pro review a lesson in refinement image5 ws2nobt8ak\" title=\"158438-phones-review-iphone-13-pro-review-a-lesson-in-refinement-image5-ws2nobt8ak.jpg\" border=\"0\" width=\"600\" height=\"400\" />\n\nWhich still seems weird.\n\n<p>Via <a href=\"https://wilwheaton.tumblr.com/post/691173806602141696/vizreef-yokogawa-aq1200-multi-field\">WIL WHEATON dot TUMBLR dot COM - vizreef: Yokogawa // AQ1200 Multi Field...</a>:</p>\n",
				"date_published": "2022-08-01T15:07:19-05:00",
				"url": "https://www.bugsandbunnies.org/2022/08/01/tricorders.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2021/08/04/twos-company-get.html",
				
				"content_html": "<p>Two’s company. Get lost nerd.</p>\n\n<p><img src=\"https://jaylyerly.micro.blog/uploads/2021/35869d6666.jpg\" width=\"600\" height=\"450\" alt=\"\" /></p>\n",
				"content_text": "Two’s company. Get lost nerd. \n\n<img src=\"https://jaylyerly.micro.blog/uploads/2021/35869d6666.jpg\" width=\"600\" height=\"450\" alt=\"\" />\n",
				"date_published": "2021-08-04T20:42:00-05:00",
				"url": "https://www.bugsandbunnies.org/2021/08/04/twos-company-get.html",
				"tags": ["Rabbit"]
			},
			{
				"id": "http://jaylyerly.micro.blog/2021/08/04/the-mysterious-error.html",
				"title": "The MYSTERIOUS Error.",
				"content_html": "<p>Callisto is a Catalyst app, mostly running iOS style code on a Mac.  But there are some things that Catalyst apps can&rsquo;t do &ndash; like run a python server as another process.  But Mac apps can!</p>\n\n<p>There are a lot of instructions around the Internet about how to use AppKit code within your Catalyst app to do those Mac things that Catalyst doesn&rsquo;t cover yet.  <a href=\"https://www.highcaffeinecontent.com/blog/20190607-Beyond-the-Checkbox-with-Catalyst-and-AppKit\">This article</a> from Steve Troughton-Smith was our guide.</p>\n\n<p>We also want to do auto-updates like a regular Mac app.  We&rsquo;re distributing outside the Mac App Store for Reasons, so we&rsquo;re in charge of our own updates.  Yep, dear reader, that means <a href=\"https://sparkle-project.org\">Sparkle</a>, which should be fine, right?  So we get the Sparkle framework and link it in to our AppKit bundle which is a plugin for our main app.  Compile, run and 💥.  This error is staring at us from the console.</p>\n\n<pre><code>code signature in (&lt;full path redacted&gt;/Sparkle.framework/Versions/A/Sparkle) not valid for use \nin process using Library Validation: not allowing mapping of development code into production process\n</code></pre>\n\n<p>What does <em>that</em> mean?  After some furious googling, we&rsquo;re left empty handed and confused.  The worst kind of error is that special, <em>new</em> error that no one else has ever seen.  Bollocks.</p>\n\n<p>After some futile futzing around in the dark, I give up and burn a &lsquo;code level&rsquo; support ticket with Apple.  I send a fairly detailed outline of the problem and the next morning I get back a nice response asking for more details.  In particular, how are the app and the framework code signed?  (You can check that with <code>codesign -vvvd &lt;.app or .framework&gt;</code>.)</p>\n\n<p>And immediately, I see it.</p>\n\n<p>App Signature:</p>\n\n<p><code>Authority=Developer ID Application: Oak City Labs, LLC (XXXXXXXXX)</code></p>\n\n<p>Framework Signature:</p>\n\n<p><code>Authority=Apple Development: Continuous Integration (YYYYYYYYY)</code></p>\n\n<p>The app is signed with a <em>production</em> identity while the framework is signed with a <em>development</em> identity.  That&rsquo;s what that weird error meant about <code>not allowing mapping of development code into production process</code>.  The <code>codesign</code> docs point out how frameworks and apps need to both be signed with the same Team ID (which I checked), but don&rsquo;t mention this distinction between production / development signing identities.</p>\n\n<p>I update Xcode so that the AppKit bundle was being signed with the same production identity and all is well!  We are fully Sparkle enabled!  Curiously, the AppKit bundle has always been signed with the development identity before, yet it loaded fine at runtime.  That must be one of those fine distinctions between a bundle and a framework that I don&rsquo;t quite understand.</p>\n\n<p>But now we celebrate!  🎉🎉🎉</p>\n",
				"content_text": "Callisto is a Catalyst app, mostly running iOS style code on a Mac.  But there are some things that Catalyst apps can't do -- like run a python server as another process.  But Mac apps can! \n\nThere are a lot of instructions around the Internet about how to use AppKit code within your Catalyst app to do those Mac things that Catalyst doesn't cover yet.  [This article](https://www.highcaffeinecontent.com/blog/20190607-Beyond-the-Checkbox-with-Catalyst-and-AppKit) from Steve Troughton-Smith was our guide.\n\nWe also want to do auto-updates like a regular Mac app.  We're distributing outside the Mac App Store for Reasons, so we're in charge of our own updates.  Yep, dear reader, that means [Sparkle](https://sparkle-project.org), which should be fine, right?  So we get the Sparkle framework and link it in to our AppKit bundle which is a plugin for our main app.  Compile, run and 💥.  This error is staring at us from the console.\n\n```\ncode signature in (<full path redacted>/Sparkle.framework/Versions/A/Sparkle) not valid for use \nin process using Library Validation: not allowing mapping of development code into production process\n```\n\nWhat does _that_ mean?  After some furious googling, we're left empty handed and confused.  The worst kind of error is that special, _new_ error that no one else has ever seen.  Bollocks.  \n\nAfter some futile futzing around in the dark, I give up and burn a 'code level' support ticket with Apple.  I send a fairly detailed outline of the problem and the next morning I get back a nice response asking for more details.  In particular, how are the app and the framework code signed?  (You can check that with `codesign -vvvd <.app or .framework>`.)\n\nAnd immediately, I see it.  \n\nApp Signature:\n\n`Authority=Developer ID Application: Oak City Labs, LLC (XXXXXXXXX)`\n\nFramework Signature:\n\n`Authority=Apple Development: Continuous Integration (YYYYYYYYY)`\n\nThe app is signed with a _production_ identity while the framework is signed with a _development_ identity.  That's what that weird error meant about `not allowing mapping of development code into production process`.  The `codesign` docs point out how frameworks and apps need to both be signed with the same Team ID (which I checked), but don't mention this distinction between production / development signing identities.\n\nI update Xcode so that the AppKit bundle was being signed with the same production identity and all is well!  We are fully Sparkle enabled!  Curiously, the AppKit bundle has always been signed with the development identity before, yet it loaded fine at runtime.  That must be one of those fine distinctions between a bundle and a framework that I don't quite understand.\n\nBut now we celebrate!  🎉🎉🎉\n\n\n",
				"date_published": "2021-08-04T08:24:31-05:00",
				"url": "https://www.bugsandbunnies.org/2021/08/04/the-mysterious-error.html"
			},
			{
				"id": "http://jaylyerly.micro.blog/2021/08/04/throw-some-results.html",
				"title": "Throw some Results ",
				"content_html": "<p>Errors, we&rsquo;ve all got &lsquo;em.  What do we do with &lsquo;em?</p>\n\n<p>Swift has a couple of different error handling patterns.  There&rsquo;s <code>try</code> and <code>catch</code> which I always think of as kind of the nuclear option.  Something went wrong, the code blows up with a <code>throw</code> and our hero, the intrepid programmer, has to deal with it right here, right now.  And then there&rsquo;s <code>Result</code>, an elegant weapon for a more civilized age.  Call a method and get back a <code>Result</code>, then deal with it as you like &ndash; check for the value, handle the error or maybe even ignore it altogether.  Depending on your situation, one of these is likely to suit better than the other.</p>\n\n<p>But sometimes the situation changes.  Maybe you wrote some code that should obviously <code>throw</code>(or calls some library code that <code>throws</code>), but it would really make a lot more sense to return a <code>Result</code>.  As it turns out, it&rsquo;s really easy to convert between <code>try</code>/<code>catch</code> and a <code>Result</code> type.</p>\n\n<p>Imagine you have some code that can <code>throw</code>.  Maybe even it always throws, because it is a <code>badIdea()</code>.  But you need to have a <code>Result</code> instance instead.  The <code>Result</code> type has an initializer that handles this perfectly.  You hand it a closure that returns the <code>Success</code> type for the <code>Result</code> and any error thrown by the closure is used for the <code>Failure</code> case.  Basically, they&rsquo;ve wrapped up all the boilerplate in this initializer, and you get a very concise way to convert <code>try</code> into a <code>Result</code>.</p>\n\n<pre><code class=\"language-swift\">enum HorrendousError: Error {\n    case veryBad\n}\n\nfunc badIdea() throws -&gt; String {\n    throw HorrendousError.veryBad\n}\n\nlet result = Result&lt;String, Error&gt; { try badIdea() }\n\n</code></pre>\n\n<p>The full signature of that initializer is <code>Result.init(catching: () -&gt; Success)</code>.  The single argument is a closure returns the <code>Success</code> type &ndash; here that&rsquo;s a <code>String</code>.  If the closure throws, then that gets wrapped up as the <code>.failure</code> case.</p>\n\n<p>How about doing the reverse?  You&rsquo;ve got a result type, but you&rsquo;d rather access the value in a <code>try</code> / <code>catch</code> sort of way.  The <code>Result</code> type itself has a accessor method for just such an occasion!</p>\n\n<pre><code class=\"language-swift\">let value = try someResult.get()\n</code></pre>\n\n<p>If the <code>Result</code> type is the <code>.success</code> case, it just returns the successful value.  If <code>someResult</code> is a <code>.failure</code> case, the <code>get()</code> method will <code>throw</code>.  This is especially useful if you want to access the result and ignore any errors:</p>\n\n<pre><code class=\"language-swift\">let optionalValue = try? someResult.get()\n</code></pre>\n\n<p>This is also handy in testing when you expect a <code>Result</code> type to be successful.  Use the <code>get()</code> method to access the value and let <code>XCTest</code>&rsquo;s support for tests that <code>throw</code> to handle the error cases.  This can make tests shorter and easier to read too.</p>\n\n<p>For me, discovering the interchangeable nature of <code>try</code>/<code>catch</code> and the <code>Result</code> type was a bit of an &lsquo;aha!&rsquo; moment.  You&rsquo;re not locked in to on type of error handling or another.  With these convenient converters, you can fluidly move from one type to another as needed.  And without a lot of boilerplate code for the conversions!</p>\n",
				"content_text": "Errors, we've all got 'em.  What do we do with 'em?\r\n\r\nSwift has a couple of different error handling patterns.  There's `try` and `catch` which I always think of as kind of the nuclear option.  Something went wrong, the code blows up with a `throw` and our hero, the intrepid programmer, has to deal with it right here, right now.  And then there's `Result`, an elegant weapon for a more civilized age.  Call a method and get back a `Result`, then deal with it as you like -- check for the value, handle the error or maybe even ignore it altogether.  Depending on your situation, one of these is likely to suit better than the other.\r\n\r\nBut sometimes the situation changes.  Maybe you wrote some code that should obviously `throw`(or calls some library code that `throws`), but it would really make a lot more sense to return a `Result`.  As it turns out, it's really easy to convert between `try`/`catch` and a `Result` type.\r\n\r\nImagine you have some code that can `throw`.  Maybe even it always throws, because it is a `badIdea()`.  But you need to have a `Result` instance instead.  The `Result` type has an initializer that handles this perfectly.  You hand it a closure that returns the `Success` type for the `Result` and any error thrown by the closure is used for the `Failure` case.  Basically, they've wrapped up all the boilerplate in this initializer, and you get a very concise way to convert `try` into a `Result`.\r\n\r\n\r\n```swift\r\nenum HorrendousError: Error {\r\n    case veryBad\r\n}\r\n\r\nfunc badIdea() throws -> String {\r\n    throw HorrendousError.veryBad\r\n}\r\n\r\nlet result = Result<String, Error> { try badIdea() }\r\n\r\n```\r\n\r\nThe full signature of that initializer is `Result.init(catching: () -> Success)`.  The single argument is a closure returns the `Success` type -- here that's a `String`.  If the closure throws, then that gets wrapped up as the `.failure` case. \r\n\r\nHow about doing the reverse?  You've got a result type, but you'd rather access the value in a `try` / `catch` sort of way.  The `Result` type itself has a accessor method for just such an occasion!\r\n\r\n```swift\r\nlet value = try someResult.get()\r\n```\r\n\r\nIf the `Result` type is the `.success` case, it just returns the successful value.  If `someResult` is a `.failure` case, the `get()` method will `throw`.  This is especially useful if you want to access the result and ignore any errors:\r\n\r\n```swift\r\nlet optionalValue = try? someResult.get()\r\n```\r\n\r\nThis is also handy in testing when you expect a `Result` type to be successful.  Use the `get()` method to access the value and let `XCTest`'s support for tests that `throw` to handle the error cases.  This can make tests shorter and easier to read too.\r\n\r\nFor me, discovering the interchangeable nature of `try`/`catch` and the `Result` type was a bit of an 'aha!' moment.  You're not locked in to on type of error handling or another.  With these convenient converters, you can fluidly move from one type to another as needed.  And without a lot of boilerplate code for the conversions!  \n",
				"date_published": "2021-08-04T08:24:01-05:00",
				"url": "https://www.bugsandbunnies.org/2021/08/04/throw-some-results.html"
			}
	]
}
